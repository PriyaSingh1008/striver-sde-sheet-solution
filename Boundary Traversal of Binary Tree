#include <bits/stdc++.h> 
/************************************************************

    Following is the Binary Tree node structure:
    
    template <typename T>
    class TreeNode {
        public :
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~TreeNode() {
            if(left)
                delete left;
            if(right)
                delete right;
        }
    };

************************************************************/
 void find_left(TreeNode<int>*root,vector<int>&ans){
        if(root==NULL) return;
        if(root->left==NULL&&root->right==NULL){
            return ;
        }
        ans.push_back(root->data);
        if(root->left){
            find_left(root->left,ans);
        }
        else{
            find_left(root->right,ans);
        }
        
    }
    void find_leaf(TreeNode<int>*root,vector<int>&ans){
        if(!root)
        return ;
        if(root->left==NULL&&root->right==NULL){
            ans.push_back(root->data);
        }
       find_leaf(root->left,ans);
       find_leaf(root->right,ans);
        
    }
    void find_right(TreeNode<int>*root,vector<int>&ans){
        if(root==NULL)
        return ;
        if(root->left==NULL&&root->right==NULL){
            return ;
        }
        if(root->right){
            find_right(root->right,ans);
            ans.push_back(root->data);
           
        }
        else{
            find_right(root->left,ans);
            ans.push_back(root->data);
        }
    }

vector<int> traverseBoundary(TreeNode<int>* root){
     vector<int>ans;
        if(!root) return ans;
        if(root->left==NULL&& root->right==NULL){
           ans.push_back(root->data) ;
           return ans;
        }
        ans.push_back(root->data);
        find_left(root->left,ans);
        find_leaf(root,ans);
        find_right(root->right,ans);
        return ans;
    // Write your code here.
}
code link:https://www.codingninjas.com/studio/problems/boundary-traversal-of-binary-tree_8230712?challengeSlug=striver-sde-challenge&leftPanelTab=0
